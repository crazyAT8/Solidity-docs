Chapter 2: Ownable Contracts

    Did you spot the security hole in the previous chapter?

    setKittyContractAddress is external, 
        so anyone can call it! 
            That means anyone who called the function could change the address of the CryptoKitties contract, 
                and break our app for all its users.

    We do want the ability to update this address in our contract, 
        but we don't want everyone to be able to update it.

    To handle cases like this, 
        one common practice that has emerged is to make contracts Ownable 
            â€” meaning they have an owner (you) who has special privileges.

OpenZeppelin's Ownable contract

    Below is the Ownable contract taken from the OpenZeppelin Solidity library. 
    OpenZeppelin is a library of secure and community-vetted smart contracts 
        that you can use in your own DApps. 
    After this lesson, 
        we highly recommend you check out their site to further your learning!

    Give the contract below a read-through. 
        You're going to see a few things we haven't learned yet, 
            but don't worry, 
                we'll talk about them afterward.

// SEE CODE //


A few new things here we haven't seen before:

    * Constructors: 
            constructor() is a constructor, 
                which is an optional special function. 
                    It will get executed only one time, 
                        when the contract is first created.
    * Function Modifiers: 
            modifier onlyOwner(). 
                Modifiers are kind of half-functions 
                    that are used to modify other functions, 
                    usually to check some requirements prior to execution. 
                    In this case, onlyOwner can be used to limit access 
                        so only the owner of the contract can run this function. 
                            We'll talk more about function modifiers in the next chapter, 
                                and what that weird _; does.
    * indexed keyword: 
        don't worry about this one, we don't need it yet.

So the Ownable contract basically does the following:

        1. When a contract is created, 
            its constructor sets the owner to msg.sender 
                (the person who deployed it)

        2. It adds an onlyOwner modifier, 
            which can restrict access 
                to certain functions to only the owner

        3. It allows you to transfer the contract to a new owner

    onlyOwner is such a common requirement for contracts 
        that most Solidity DApps start with a copy/paste of this Ownable contract, 
            and then their first contract inherits from it.

    Since we want to limit setKittyContractAddress to onlyOwner, 
        we're going to do the same for our contract.

Put it to the test

    We've gone ahead and copied the code of the Ownable contract into a new file, ownable.sol. 
    Let's go ahead and make ZombieFactory inherit from it.

        1. Modify our code to import the contents of ownable.sol. 
            If you don't remember how to do this take a look at zombiefeeding.sol.

        2. Modify the ZombieFactory contract to inherit from Ownable. 
            Again, you can take a look at zombiefeeding.sol if you don't remember how this is done.